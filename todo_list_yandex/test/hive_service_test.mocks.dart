// Mocks generated by Mockito 5.4.4 from annotations
// in todo_list_yandex/test/hive_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:logger/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_list_yandex/logger/logger.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskLogger extends _i1.Mock implements _i3.TaskLogger {
  MockTaskLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);

  @override
  void logInfo(String? message) => super.noSuchMethod(
        Invocation.method(
          #logInfo,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(
    String? message,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #logError,
          [
            message,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logDebug(String? message) => super.noSuchMethod(
        Invocation.method(
          #logDebug,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TaskLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskLoggerForTest extends _i1.Mock implements _i3.TaskLogger {
  MockTaskLoggerForTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);

  @override
  void logInfo(String? message) => super.noSuchMethod(
        Invocation.method(
          #logInfo,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(
    String? message,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #logError,
          [
            message,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logDebug(String? message) => super.noSuchMethod(
        Invocation.method(
          #logDebug,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}
